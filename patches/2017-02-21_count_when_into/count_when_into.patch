diff --git a/acse/Acse.lex b/acse/Acse.lex
index 663b2db..be8237a 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -97,6 +97,9 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"count"           { return COUNT; }
+"when"            { return WHEN; }
+"into"            { return INTO; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff --git a/acse/Acse.y b/acse/Acse.y
index ec9ef8b..5532d06 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -108,7 +108,7 @@ extern int yyerror(const char* errmsg);
    t_list *list;
    t_axe_label *label;
    t_while_statement while_stmt;
-} 
+}
 /*=========================================================================
                                TOKENS 
 =========================================================================*/
@@ -124,6 +124,8 @@ extern int yyerror(const char* errmsg);
 %token RETURN
 %token READ
 %token WRITE
+%token COUNT
+%token INTO
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -133,6 +135,11 @@ extern int yyerror(const char* errmsg);
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
 
+%token <label> WHEN
+
+%type <intval> when_statement
+%type <intval> when_statements
+
 %type <expr> exp
 %type <decl> declaration
 %type <list> declaration_list
@@ -247,6 +254,7 @@ statement   : assign_statement SEMI      { /* does nothing */ }
             | control_statement          { /* does nothing */ }
             | read_write_statement SEMI  { /* does nothing */ }
             | SEMI            { gen_nop_instruction(program); }
+            | count_when_into_statement SEMI { /* does nothing */ }
 ;
 
 control_statement : if_statement         { /* does nothing */ }
@@ -457,6 +465,41 @@ write_statement : WRITE LPAR exp RPAR
             }
 ;
 
+count_when_into_statement: COUNT LBRACE when_statements RBRACE INTO IDENTIFIER
+                         {
+                            int vreg = get_symbol_location(program, $6, 0);
+                            gen_andb_instruction(program, vreg, $3, $3, CG_DIRECT_ALL);
+                         }
+
+
+when_statements: when_statements COMMA when_statement
+               {
+                gen_add_instruction(program, $1, $1, $3, CG_DIRECT_ALL);
+                $$ = $<intval>1;
+               }
+               | when_statement {
+                 $$ = $<intval>1;
+               };
+
+when_statement: WHEN LPAR exp RPAR {
+                    $1 = newLabel(program);
+                    $$ = gen_load_immediate(program, 0);
+
+                    if ($3.expression_type == IMMEDIATE)
+                        gen_load_immediate(program, $3.value);
+                    else
+                        gen_andb_instruction(program, $3.value, $3.value,
+                                             $3.value, CG_DIRECT_ALL);
+                    gen_beq_instruction(program, $1);
+                    gen_addi_instruction(program, $$, 1);
+                }
+                code_block
+                {
+                    assignLabel(program, $1);
+                }
+
+
+
 exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
    | IDENTIFIER  {
                      int location;
