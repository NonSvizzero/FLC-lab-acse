In the following we assume that:
*   ${PATCH_DIR} is the directory containing patch files
*   ${ACSE_DIR} is the directory of the ACSE toolchain (the directory that 
    contains the 'acse', 'assembler', 'mace' directories)

To apply a patch file:

  cd ${ACSE_DIR}
  patch -Np1 -i ${PATCH_DIR}/file.patch


To compile the compiler:

  make -C ${ACSE_DIR}

Given a source file 'program.src', to compile it through ACSE:

  ${ACSE_DIR}/bin/acse program.src   # if successful it produces 'output.cfg', 'output.asm'
  ${ACSE_DIR}/bin/asm output.asm     # if successful it produces 'output.o'
  ${ACSE_DIR}/bin/mace output.o      # it executes the compiled program
  
To check that the generated code reflects what you expect, you can verify the 
content of 'output.cfg' file: it contains the code just after the codegen phase
of the compiler, where each scalar variable has a unique register associated 
and where implicit memory operations have not been added yet.


----------------------------------------------------------
Patch, compile compliler, compile program and test it

1. Apply a patch:
patch --no-backup-if-mismatch -Np1 -i patches/03\ -\ var\ declarations/01-define-simple.patch

2. Compile compiler:
make

3. Run the test (by applying a patch test/Makefile should have been edited)
make test


----------------------------------------------------------
Create a new patch file
mkdir -p patches/new_patch
make clean
git add .
git diff --staged > patches/new_patch/patch-name.patch


----------------------------------------------------------
Commit new patch file and restore the git repository status

1. Save only the patch file with a commit (do not inlcude changes already into the patch)
git reset .
git add patches/new_patch/patch-name.patch
OR just: git add patches/
git commit -m 'new patch'

3. Restore repository status
git ck .


